name: Terraform Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  terraform-check:
    name: Terraform Format and Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: v0.48.0

    - name: Terraform Format Check
      id: fmt
      run: |
        echo "Checking Terraform formatting..."
        terraform fmt -check -recursive
      continue-on-error: true

    - name: Initialize Terraform (Root)
      run: terraform init -backend=false

    - name: Validate Terraform (Root)
      id: validate-root
      run: |
        echo "Validating root Terraform configuration..."
        terraform validate
      continue-on-error: true

    - name: Run TFLint (Root)
      id: tflint-root
      run: |
        echo "Running TFLint on root..."
        tflint --init
        tflint
      continue-on-error: true

    - name: Check Project Configurations
      id: check-projects
      run: |
        echo "Checking project configurations..."
        EXIT_CODE=0
        
        for project_dir in projects/*/; do
          if [ -d "$project_dir" ]; then
            project_name=$(basename "$project_dir")
            echo "🔍 Checking project: $project_name"
            
            cd "$project_dir"
            
            # Check formatting
            echo "  📝 Checking format..."
            if ! terraform fmt -check -recursive; then
              echo "  ❌ Format check failed for $project_name"
              EXIT_CODE=1
            fi
            
            # Initialize without backend
            echo "  🔧 Initializing..."
            if terraform init -backend=false; then
              # Validate
              echo "  ✅ Validating..."
              if ! terraform validate; then
                echo "  ❌ Validation failed for $project_name"
                EXIT_CODE=1
              fi
            else
              echo "  ❌ Init failed for $project_name"
              EXIT_CODE=1
            fi
            
            # Run TFLint if .tflint.hcl exists or use default
            echo "  🔍 Running TFLint..."
            if ! tflint --init; then
              echo "  ⚠️  TFLint init failed for $project_name"
            elif ! tflint; then
              echo "  ❌ TFLint failed for $project_name"
              EXIT_CODE=1
            fi
            
            cd - > /dev/null
          fi
        done
        
        exit $EXIT_CODE
      continue-on-error: true

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `
          ## Terraform Check Results 📋
          
          | Check | Status |
          |-------|--------|
          | Format | ${{ steps.fmt.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |
          | Validate (Root) | ${{ steps.validate-root.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |
          | TFLint (Root) | ${{ steps.tflint-root.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |
          | Projects Check | ${{ steps.check-projects.outcome == 'success' && '✅ Passed' || '❌ Failed' }} |
          
          ${{ steps.fmt.outcome != 'success' && '### ❌ Format Issues\nRun `terraform fmt -recursive` to fix formatting issues.\n\n' || '' }}
          
          <details>
          <summary>View Details</summary>
          
          This check validates:
          - ✅ Terraform formatting (`terraform fmt -check`)
          - ✅ Terraform syntax validation (`terraform validate`)  
          - ✅ TFLint static analysis
          - ✅ All project configurations
          
          </details>
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Check Results
      run: |
        if [ "${{ steps.fmt.outcome }}" != "success" ] || \
           [ "${{ steps.validate-root.outcome }}" != "success" ] || \
           [ "${{ steps.tflint-root.outcome }}" != "success" ] || \
           [ "${{ steps.check-projects.outcome }}" != "success" ]; then
          echo "❌ One or more checks failed!"
          echo ""
          echo "To fix formatting issues, run:"
          echo "  terraform fmt -recursive"
          echo ""
          exit 1
        else
          echo "✅ All checks passed!"
        fi
