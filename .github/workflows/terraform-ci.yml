name: Terraform CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  TF_VERSION: "1.9.0"
  TFLINT_VERSION: "0.50.3"
  CHECKOV_VERSION: "3.2.0"

jobs:
  validate:
    name: Terraform Validate & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive -diff
        continue-on-error: true

      - name: Terraform Init (Root)
        run: terraform init -backend=false

      - name: Terraform Validate (Root)
        run: terraform validate

      - name: Validate Project Directories
        run: |
          for project in projects/*/; do
            if [ -f "$project/main.tf" ]; then
              echo "Validating $project"
              cd "$project"
              terraform init -backend=false
              terraform validate
              cd - > /dev/null
            fi
          done

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Show TFLint version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint (Root)
        run: tflint -f compact

      - name: Run TFLint (Projects)
        run: |
          for project in projects/*/; do
            if [ -f "$project/main.tf" ]; then
              echo "Linting $project"
              cd "$project"
              tflint -f compact
              cd - > /dev/null
            fi
          done

      - name: Comment Format Check Result
        if: failure() && steps.fmt.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **Terraform Format Check Failed**\n\nPlease run `terraform fmt -recursive` to fix formatting issues.'
            })

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Checkov
        run: pip install checkov==${{ env.CHECKOV_VERSION }}

      - name: Run Checkov
        run: |
          checkov -d . \
            --framework terraform \
            --output cli \
            --output sarif \
            --output-file-path console,checkov-report.sarif \
            --quiet \
            --compact

      - name: Upload Checkov SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-report.sarif

  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for documentation markers
        run: |
          echo "Checking for terraform-docs markers in README files..."
          
          # Check root README
          if [ -f "README.md" ]; then
            if grep -q "BEGIN_TF_DOCS\|END_TF_DOCS" README.md; then
              echo "✅ Root README has terraform-docs markers"
            else
              echo "⚠️  Root README missing terraform-docs markers"
            fi
          fi
          
          # Check project READMEs
          for project in projects/*/; do
            if [ -f "$project/main.tf" ]; then
              project_name=$(basename "$project")
              if [ -f "$project/README.md" ]; then
                echo "✅ $project_name has README.md"
              else
                echo "⚠️  $project_name missing README.md"
              fi
            fi
          done
          
          echo "Documentation check completed"

  cost-estimation:
    name: Cost Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Analyze Resource Costs
        id: cost-analysis
        run: |
          echo "## 💰 Cost Analysis Report" > cost-report.md
          echo "" >> cost-report.md
          echo "This is a basic analysis of AWS resources defined in Terraform files." >> cost-report.md
          echo "" >> cost-report.md
          
          # Count different resource types
          ec2_count=$(grep -r "resource \"aws_instance\"" . | wc -l || echo "0")
          rds_count=$(grep -r "resource \"aws_db_instance\"" . | wc -l || echo "0")
          s3_count=$(grep -r "resource \"aws_s3_bucket\"" . | wc -l || echo "0")
          lambda_count=$(grep -r "resource \"aws_lambda_function\"" . | wc -l || echo "0")
          alb_count=$(grep -r "resource \"aws_lb\"" . | wc -l || echo "0")
          ecr_count=$(grep -r "resource \"aws_ecr_repository\"" . | wc -l || echo "0")
          
          echo "### 📊 Resource Summary" >> cost-report.md
          echo "" >> cost-report.md
          echo "| Resource Type | Count | Estimated Monthly Cost Range |" >> cost-report.md
          echo "|---------------|-------|------------------------------|" >> cost-report.md
          
          if [ "$ec2_count" -gt 0 ]; then
            echo "| EC2 Instances | $ec2_count | \$10 - \$200+ per instance |" >> cost-report.md
          fi
          
          if [ "$rds_count" -gt 0 ]; then
            echo "| RDS Instances | $rds_count | \$15 - \$500+ per instance |" >> cost-report.md
          fi
          
          if [ "$s3_count" -gt 0 ]; then
            echo "| S3 Buckets | $s3_count | \$1 - \$50+ per bucket |" >> cost-report.md
          fi
          
          if [ "$lambda_count" -gt 0 ]; then
            echo "| Lambda Functions | $lambda_count | \$0 - \$10+ per function |" >> cost-report.md
          fi
          
          if [ "$alb_count" -gt 0 ]; then
            echo "| Load Balancers | $alb_count | \$15 - \$25+ per ALB |" >> cost-report.md
          fi
          
          if [ "$ecr_count" -gt 0 ]; then
            echo "| ECR Repositories | $ecr_count | \$0.10 per GB stored |" >> cost-report.md
          fi
          
          echo "" >> cost-report.md
          echo "### 💡 Cost Optimization Tips" >> cost-report.md
          echo "" >> cost-report.md
          echo "- Use appropriate instance sizes for your workload" >> cost-report.md
          echo "- Consider using Spot instances for non-critical workloads" >> cost-report.md
          echo "- Implement S3 lifecycle policies for storage optimization" >> cost-report.md
          echo "- Use Reserved Instances for predictable workloads" >> cost-report.md
          echo "- Monitor and set up billing alerts" >> cost-report.md
          echo "" >> cost-report.md
          echo "### 🔗 Cost Estimation Tools" >> cost-report.md
          echo "" >> cost-report.md
          echo "For detailed cost estimates, consider using:" >> cost-report.md
          echo "- [AWS Pricing Calculator](https://calculator.aws/)" >> cost-report.md
          echo "- [Infracost](https://www.infracost.io/) (requires API key)" >> cost-report.md
          echo "- AWS Cost Explorer (after deployment)" >> cost-report.md
          echo "" >> cost-report.md
          echo "---" >> cost-report.md
          echo "*This analysis is based on resource counts and provides general estimates.*" >> cost-report.md
          
          total_resources=$((ec2_count + rds_count + s3_count + lambda_count + alb_count + ecr_count))
          echo "total_resources=$total_resources" >> $GITHUB_OUTPUT

      - name: Comment Cost Analysis
        if: steps.cost-analysis.outputs.total_resources != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const costReport = fs.readFileSync('cost-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: costReport
            });

      - name: No Resources Comment
        if: steps.cost-analysis.outputs.total_resources == '0'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '📊 **Cost Analysis**: No billable AWS resources detected in this PR.'
            });

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Check for outdated providers
        run: |
          echo "Checking for outdated providers..."
          for project in . projects/*/; do
            if [ -f "$project/main.tf" ]; then
              echo "Checking $project"
              cd "$project"
              terraform init -backend=false
              terraform providers lock -platform=linux_amd64 -platform=darwin_amd64
              cd - > /dev/null
            fi
          done
